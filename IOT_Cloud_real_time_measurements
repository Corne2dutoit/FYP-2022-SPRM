/* 

  float mmrain;
  float rain;
  int counter;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"

int pin = 2;
void count()
  {
  counter++;
  }

void setup() {
  counter = 0;
  pinMode(pin, INPUT);
  Serial.begin(9600);
  attachInterrupt(digitalPinToInterrupt(2), count, RISING);
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

float finalrain;

void loop() {
  ArduinoCloud.update();
  // Your code here 
  Serial.println(counter);
  rain = counter*3.57; //ml
  mmrain = (rain/12.417)+0.5; //mm
  Serial.println(rain);
  
}



/*
  Since Counter is READ_WRITE variable, onCounterChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onCounterChange()  {
  // Add your code here to act upon Counter change
  
}

/*
  Since Rain is READ_WRITE variable, onRainChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onRainChange()  {
  // Add your code here to act upon Rain change
}

/*
  Since Mmrain is READ_WRITE variable, onMmrainChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onMmrainChange()  {
  // Add your code here to act upon Mmrain change
}
